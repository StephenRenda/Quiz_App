{"version":3,"sources":["components/Progress.js","components/Question.js","components/Answer.js","components/Answers.js","App.js","serviceWorker.js","index.js"],"names":["Progress","props","current","total","Question","question","Answer","classes","selected","push","value","letter","className","join","onClick","handleClick","answer","Answers","answer_a","currentAnswer","answer_b","answer_c","answer_d","App","useState","currentQuestion","setCurrentQuestion","setCurrentAnswer","answers","setAnswers","showResults","setShowResults","error","setError","start","setStart","id","correct_answer","questions","setQuestions","StephenQuestions","map","find","questionId","key","renderResultMark","length","renderError","e","target","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oPAUeA,MARf,SAAkBC,GAChB,OACE,wCACYA,EAAMC,QADlB,OAC+BD,EAAME,QCC1BC,MAJf,SAAkBH,GAChB,OAAO,4BAAKA,EAAMI,WCiBLC,MAlBf,SAAgBL,GACd,IAAIM,EAAU,CAAC,UAKf,OAHIN,EAAMO,UACRD,EAAQE,KAAK,YAGb,4BACEC,MAAOT,EAAMU,OACbC,UAAWL,EAAQM,KAAK,KACxBC,QAASb,EAAMc,aAEf,0BAAMH,UAAU,UAAUX,EAAMU,OAAhC,KACCV,EAAMe,SCmBEC,MA/Bf,SAAiBhB,GACf,OACE,oCACE,kBAAC,EAAD,CACEU,OAAO,IACPK,OAAQf,EAAMI,SAASa,SACvBH,YAAad,EAAMc,YACnBP,SAAkC,MAAxBP,EAAMkB,gBAElB,kBAAC,EAAD,CACER,OAAO,IACPK,OAAQf,EAAMI,SAASe,SACvBL,YAAad,EAAMc,YACnBP,SAAkC,MAAxBP,EAAMkB,gBAElB,kBAAC,EAAD,CACER,OAAO,IACPK,OAAQf,EAAMI,SAASgB,SACvBN,YAAad,EAAMc,YACnBP,SAAkC,MAAxBP,EAAMkB,gBAElB,kBAAC,EAAD,CACER,OAAO,IACPK,OAAQf,EAAMI,SAASiB,SACvBP,YAAad,EAAMc,YACnBP,SAAkC,MAAxBP,EAAMkB,kBCiKTI,MAvLf,WAAgB,IAAD,EACiCC,mBAAS,GAD1C,mBACNC,EADM,KACWC,EADX,OAE6BF,mBAAS,IAFtC,mBAENL,EAFM,KAESQ,EAFT,OAGiBH,mBAAS,IAH1B,mBAGNI,EAHM,KAGGC,EAHH,OAIyBL,oBAAS,GAJlC,mBAINM,EAJM,KAIOC,EAJP,OAKaP,mBAAS,IALtB,mBAKNQ,EALM,KAKCC,EALD,OAOaT,oBAAS,GAPtB,mBAONU,EAPM,KAOCC,EAPD,OASqBX,mBAAS,CACzC,CACEY,GAAI,EACJ/B,SAAU,2CACVa,SACE,gFACFE,SAAU,gDACVC,SACE,wEACFC,SAAU,mBACVe,eAAgB,KAElB,CACED,GAAI,EACJ/B,SAAU,2BACVa,SAAU,aACVE,SAAU,aACVC,SAAU,eACVC,SAAU,mBACVe,eAAgB,KAElB,CACED,GAAI,EACJ/B,SAAU,8CACVa,SAAU,oBACVE,SAAU,WACVC,SAAU,cACVC,SAAU,eACVe,eAAgB,OArCP,mBASNC,EATM,KASKC,EATL,KAyCPC,EAAmB,CACvB,CACEJ,GAAI,EACJ/B,SAAU,qCACVa,SAAU,OACVE,SAAU,OACVC,SAAU,SACVC,SAAU,wBACVe,eAAgB,KAElB,CACED,GAAI,EACJ/B,SAAU,8BACVa,SAAU,kBACVE,SAAU,mBACVC,SAAU,iBACVC,SAAU,iBACVe,eAAgB,KAElB,CACED,GAAI,EACJ/B,SAAU,uCACVa,SAAU,IACVE,SAAU,IACVC,SAAU,IACVC,SAAU,IACVe,eAAgB,MAIdhC,EAAWiC,EAAUb,GAuE3B,OAAKS,EAYMJ,EAEP,yBAAKlB,UAAU,qBACb,uCACA,4BAhEGgB,EAAQa,KAAI,SAACzB,GAClB,IAAMX,EAAWiC,EAAUI,MACzB,SAACrC,GAAD,OAAcA,EAAS+B,KAAOpB,EAAO2B,cAGvC,OACE,yBAAKC,IAAKvC,EAAS+B,IAChB/B,EAASA,SADZ,MAdmB,SAACA,EAAUW,GAClC,OAAIX,EAASgC,iBAAmBrB,EAAOA,OAC9B,0BAAMJ,UAAU,WAAhB,WAEF,0BAAMA,UAAU,UAAhB,aAWsBiC,CAAiBxC,EAAUW,QA0DpD,4BAAQJ,UAAU,kBAAkBE,QApD1B,WACde,EAAW,IACXF,EAAiB,IACjBD,EAAmB,GACnBK,GAAe,KAgDX,YAOF,yBAAKnB,UAAU,aACb,kBAAC,EAAD,CAAUT,MAAOmC,EAAUQ,OAAQ5C,QAASuB,EAAkB,IAC9D,kBAAC,EAAD,CAAUpB,SAAUA,EAASA,WA1Ff,WAClB,GAAK2B,EAIL,OAAO,yBAAKpB,UAAU,SAASoB,GAsF1Be,GACD,kBAAC,EAAD,CACE1C,SAAUA,EACVc,cAAeA,EACfJ,YApGY,SAACiC,GACnBrB,EAAiBqB,EAAEC,OAAOvC,OAC1BuB,EAAS,OAoGL,4BAAQrB,UAAU,kBAAkBE,QA7D7B,WACX,IAAME,EAAS,CAAE2B,WAAYtC,EAAS+B,GAAIpB,OAAQG,GAE7CA,GAILS,EAAQnB,KAAKO,GACba,EAAWD,GACXD,EAAiB,IACjBuB,QAAQC,IAAIhC,GAERM,EAAkB,EAAIa,EAAUQ,OAClCpB,EAAmBD,EAAkB,GAGvCM,GAAe,IAZbE,EAAS,8BAyDP,yBA/BF,yBAAKrB,UAAU,qBACb,6CACA,4BAAQA,UAAU,kBAAkBE,QATrB,WACnBqB,GAAS,GACTI,EAAaD,KAOT,SAGA,4BAAQ1B,UAAU,kBAAkBE,QAhBnB,WACrBqB,GAAS,GACTI,EAAaC,KAcT,WC/IYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLkB,QAAQlB,MAAMA,EAAMqC,c","file":"static/js/main.bea7c218.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Progress(props) {\r\n  return (\r\n    <h2>\r\n      Question {props.current} of {props.total}\r\n    </h2>\r\n  );\r\n}\r\n\r\nexport default Progress;\r\n","import React from \"react\";\r\n\r\nfunction Question(props) {\r\n  return <h1>{props.question}</h1>;\r\n}\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\n\r\nfunction Answer(props) {\r\n  let classes = [\"answer\"];\r\n\r\n  if (props.selected) {\r\n    classes.push(\"selected\");\r\n  }\r\n  return (\r\n    <button\r\n      value={props.letter}\r\n      className={classes.join(\" \")}\r\n      onClick={props.handleClick}\r\n    >\r\n      <span className=\"letter\">{props.letter}.</span>\r\n      {props.answer}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Answer;\r\n","import React from \"react\";\r\nimport Answer from \"./Answer\";\r\n\r\nfunction Answers(props) {\r\n  return (\r\n    <>\r\n      <Answer\r\n        letter=\"a\"\r\n        answer={props.question.answer_a}\r\n        handleClick={props.handleClick}\r\n        selected={props.currentAnswer === \"a\"}\r\n      />\r\n      <Answer\r\n        letter=\"b\"\r\n        answer={props.question.answer_b}\r\n        handleClick={props.handleClick}\r\n        selected={props.currentAnswer === \"b\"}\r\n      />\r\n      <Answer\r\n        letter=\"c\"\r\n        answer={props.question.answer_c}\r\n        handleClick={props.handleClick}\r\n        selected={props.currentAnswer === \"c\"}\r\n      />\r\n      <Answer\r\n        letter=\"d\"\r\n        answer={props.question.answer_d}\r\n        handleClick={props.handleClick}\r\n        selected={props.currentAnswer === \"d\"}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Answers;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Progress from \"./components/Progress\";\nimport Question from \"./components/Question\";\nimport Answers from \"./components/Answers\";\n\nfunction App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const [start, setStart] = useState(false);\n\n  const [questions, setQuestions] = useState([\n    {\n      id: 1,\n      question: \"Which statement about Hooks is not true?\",\n      answer_a:\n        \"Hooks are 100% backwards-compatible and can be used side by side with classes\",\n      answer_b: \"Hooks are still in beta and not available yet\",\n      answer_c:\n        \"Hooks are completely opt-in, there's no need to rewrite existing code\",\n      answer_d: \"All of the above\",\n      correct_answer: \"b\",\n    },\n    {\n      id: 2,\n      question: \"Which one is not a Hook?\",\n      answer_a: \"useState()\",\n      answer_b: \"useConst()\",\n      answer_c: \"useReducer()\",\n      answer_d: \"All of the above\",\n      correct_answer: \"b\",\n    },\n    {\n      id: 3,\n      question: \"What Hook should be used for data fetching?\",\n      answer_a: \"useDataFetching()\",\n      answer_b: \"useApi()\",\n      answer_c: \"useEffect()\",\n      answer_d: \"useRequest()\",\n      correct_answer: \"c\",\n    },\n  ]);\n\n  const StephenQuestions = [\n    {\n      id: 1,\n      question: \"What is the name of Stephen's dog?\",\n      answer_a: \"Finn\",\n      answer_b: \"Jake\",\n      answer_c: \"Fluffy\",\n      answer_d: \"He doesn't have a dog\",\n      correct_answer: \"b\",\n    },\n    {\n      id: 2,\n      question: \"When is Stephen's birthday?\",\n      answer_a: \"January 1, 1990\",\n      answer_b: \"Febuary 12, 1992\",\n      answer_c: \"April 21, 1992\",\n      answer_d: \"He wasn't born\",\n      correct_answer: \"c\",\n    },\n    {\n      id: 3,\n      question: \"How many siblings does Stephen have?\",\n      answer_a: \"1\",\n      answer_b: \"2\",\n      answer_c: \"3\",\n      answer_d: \"4\",\n      correct_answer: \"c\",\n    },\n  ];\n\n  const question = questions[currentQuestion];\n\n  const handleClick = (e) => {\n    setCurrentAnswer(e.target.value);\n    setError(\"\");\n  };\n\n  const renderError = () => {\n    if (!error) {\n      return;\n    }\n\n    return <div className=\"error\">{error}</div>;\n  };\n\n  const renderResultMark = (question, answer) => {\n    if (question.correct_answer === answer.answer) {\n      return <span className=\"correct\">Correct</span>;\n    }\n    return <span className=\"failed\">Incorrect</span>;\n  };\n\n  const renderResultData = () => {\n    return answers.map((answer) => {\n      const question = questions.find(\n        (question) => question.id === answer.questionId\n      );\n\n      return (\n        <div key={question.id}>\n          {question.question} - {renderResultMark(question, answer)}\n        </div>\n      );\n    });\n  };\n\n  const restart = () => {\n    setAnswers([]);\n    setCurrentAnswer(\"\");\n    setCurrentQuestion(0);\n    setShowResults(false);\n  };\n\n  const next = () => {\n    const answer = { questionId: question.id, answer: currentAnswer };\n\n    if (!currentAnswer) {\n      setError(\"Please setect an answer.\");\n      return;\n    }\n    answers.push(answer);\n    setAnswers(answers);\n    setCurrentAnswer(\"\");\n    console.log(currentAnswer);\n\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n      return;\n    }\n    setShowResults(true);\n  };\n\n  const startUpStephen = () => {\n    setStart(true);\n    setQuestions(StephenQuestions);\n  };\n  const startUpReact = () => {\n    setStart(true);\n    setQuestions(questions);\n  };\n\n  if (!start) {\n    return (\n      <div className=\"container results\">\n        <h2>Select a Quiz</h2>\n        <button className=\"btn btn-primary\" onClick={startUpReact}>\n          React\n        </button>\n        <button className=\"btn btn-primary\" onClick={startUpStephen}>\n          Silly\n        </button>\n      </div>\n    );\n  } else if (showResults) {\n    return (\n      <div className=\"container results\">\n        <h2>Results</h2>\n        <ul>{renderResultData()}</ul>\n        <button className=\"btn btn-primary\" onClick={restart}>\n          Restart\n        </button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"container\">\n        <Progress total={questions.length} current={currentQuestion + 1} />\n        <Question question={question.question} />\n        {renderError()}\n        <Answers\n          question={question}\n          currentAnswer={currentAnswer}\n          handleClick={handleClick}\n        />\n        <button className=\"btn btn-primary\" onClick={next}>\n          Confirm and Continue\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}